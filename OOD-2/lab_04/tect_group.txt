				if ((!vectorIndex.empty()) && (vectorIndex.size() > 1))
				{
					sort(vectorIndex.begin(), vectorIndex.end());
					std::vector<std::unique_ptr<IShapeDecorator>> newArr;
					auto newShape = std::make_unique<CShapeComposite>();
					bool found = false;
					for (int i = 0; i < vectorIndex.size(); i++)
					{
						newShape->Add(move(arrayFigures[vectorIndex[i]]));
					}
					for (int i = 0; i < arrayFigures.size(); i++)
					{
						for (int j = 0; j < vectorIndex.size(); j++)
						{
							if (i == vectorIndex[j])
							{
								found = true;
								break;
							}
						}
						if (!found)
							newArr.emplace_back(move(arrayFigures[i]));
						else
							found = false;
					}
					newArr.emplace_back(std::make_unique<CShapeComposite>());
					newArr[newArr.size() - 1] = move(newShape);
					arrayFigures = move(newArr);
					vectorIndex.clear();
					vectorIndex.push_back(arrayFigures.size() - 1);